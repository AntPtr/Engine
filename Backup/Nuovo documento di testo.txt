#version 330 core

out vec4 fragColor;
in vec2 texCoord;
in vec3 Normals;
in vec3 fragPos;
in vec3 camPos;

struct DirLigth{
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLigth{
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

struct Material {
	sampler2D texture_diffuse1;
	sampler2D texture_diffuse2;
	sampler2D texture_diffuse3;
	sampler2D texture_specular1;
	sampler2D texture_specular2;
	float shiness;
};

#define NUM_POINT  4

uniform Material material;
uniform DirLigth directionl;
uniform PointLigth point[NUM_POINT];

vec3 directional_ligth(DirLigth dir, vec3 normals, vec3 viewPos);
vec3 point_ligth(PointLigth point, vec3 normals, vec3 viewPos, vec3 fragPos);

void main()
{	
	vec3 norm = normalize(Normals);
	vec3 viewDir = normalize (camPos - fragPos);
	vec3 output = directional_ligth(directionl, norm, viewDir);
	for (int i = 0; i < NUM_POINT; i++)
		output += point_ligth(point[i], norm, viewDir, fragPos);

	fragColor = vec4(output, 1.0);
}

vec3 directional_ligth(DirLigth dir, vec3 normals, vec3 viewPos){

	vec3 direction = normalize (-dir.direction);
	
	float diff = max(dot(normals, direction) ,0.0);

	vec3 refle = reflect(-direction, normals);
	float spec = pow(max(dot(viewPos, refle), 0.0), material.shiness);

	vec3 ambient = dir.ambient * vec3(texture(material.texture_diffuse1, texCoord));
	vec3 diffuse = dir.diffuse * diff * vec3(texture(material.texture_diffuse1, texCoord));
	vec3 specular = dir.specular * spec * vec3(texture(material.texture_specular1, texCoord));

	vec3 result = ambient + diffuse + specular;
	return result;
}

vec3 point_ligth(PointLigth point, vec3 normals, vec3 viewPos, vec3 fragPos){
	vec3 lDir = normalize(point.position - fragPos);
	
	float diff = max(dot(normals, lDir), 0.0);

	vec3 refle = reflect (-lDir, normals);
	float  spec = pow(max(dot(viewPos, refle) , 0.0), material.shiness);

	 float distance = length(point.position - fragPos);
	 float attenuation = 1.0 / (point.constant + point.linear * distance + point.quadratic * (distance * distance));    
	
	vec3 ambient = point.ambient * vec3(texture(material.texture_diffuse1, texCoord));
	vec3 diffuse = point.diffuse * diff * vec3(texture(material.texture_diffuse1, texCoord));
	vec3 specular = point.specular * spec * vec3(texture(material.texture_specular1, texCoord));

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	vec3 result = ambient + diffuse + specular;
	return result;
}